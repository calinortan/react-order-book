{"version":3,"sources":["components/OrderGrid/OrderGrid.tsx","logo.svg","containers/ApiProvider/ApiProvider.tsx","containers/ApiProvider/index.tsx","components/OrderItem/index.tsx","components/OrderItem/OrderItem.tsx","components/OrderGrid/index.tsx","components/OrderBookActions/index.tsx","components/OrderBookActions/OrderBookActions.tsx","components/OrderBook/OrderBook.tsx","components/OrderBook/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["OrderType","WS_URL","SUBSCRIBE_MESSAGE","apiInitialState","bids","asks","connecting","error","ApiProviderContext","createContext","ORDER_BOOK_UPDATE_DELAY","ApiProvider","wsConnection","WebSocket","latestBids","latestAsks","state","setBids","newBids","setState","setAsks","newAsks","throttledSetBids","throttle","throttledSetAsks","setNewBids","newOrdersMap","setNewAsks","createNewOrders","newOrders","initialOrders","reduce","acc","current","price","amount","handleNewBids","handleNewAsks","handleWsOpen","event","send","onmessage","message","JSON","parse","data","handleWsError","this","onopen","onerror","cancel","children","props","Provider","value","React","Component","OrderItem","memo","size","total","ratio","ratioColor","className","style","width","backgroundColor","toLocaleString","OrderGrid","type","orders","ordersToRender","useMemo","sortedPrices","Object","keys","sort","a","b","Number","Ask","drop","dropRight","length","ordersTotalMap","priceList","reverse","index","ordersList","previousPrice","previousTotal","get","set","Map","map","parsedPrice","maxTotalSelector","first","last","maxTotal","OrderBookActions","spread","group","handleIncrease","handleDecrease","increaseDisabled","decreaseDisabled","isNaN","isNil","onClick","disabled","GROUP_OPTIONS","OrderBook","useState","groupIndex","setGroupIndex","groupFactor","contextValue","useContext","lastAskPrice","min","firstBidPrice","max","Math","abs","getGroupedOrders","useCallback","currentPrice","roundPrice","floor","newAmount","useOrders","handleIncreaseGroup","handleDecreaseGroup","color","secondaryColor","Bid","App","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e2c955fa.chunk.js","sourcesContent":["import React, { memo, useMemo } from \"react\";\nimport { drop, dropRight, last, first, reduce } from \"lodash\";\nimport OrderItem from \"components/OrderItem\";\nimport { OrdersMap } from \"types\";\nimport \"./OrderGrid.scss\";\n\nexport enum OrderType {\n  Bid = \"Bid\",\n  Ask = \"Ask\",\n}\ninterface OrderGridProps {\n  type: OrderType;\n  orders: OrdersMap;\n}\n\nconst ITEMS_TO_RENDER_PER_BOOK = 15;\n\nconst OrderGrid: React.FC<OrderGridProps> = memo(({ type, orders }) => {\n  const ordersToRender = useMemo(() => {\n    const prices = Object.keys(orders);\n\n    const sortedPrices = prices.sort((a, b) => Number(b) - Number(a));\n\n    const dropFunction = type === OrderType.Ask ? drop : dropRight;\n\n    return dropFunction(\n      sortedPrices,\n      sortedPrices.length - ITEMS_TO_RENDER_PER_BOOK\n    );\n  }, [type, orders]);\n\n  const ordersTotalMap = useMemo(() => {\n    const priceList =\n      type === OrderType.Ask ? [...ordersToRender].reverse() : ordersToRender;\n    return reduce(\n      priceList,\n      (acc, current, index, ordersList) => {\n        const previousPrice: number = Number(ordersList[Number(index) - 1]);\n        const previousTotal: number = acc.get(previousPrice) || 0;\n        acc.set(Number(current), previousTotal + orders[Number(current)]);\n\n        return acc;\n      },\n      new Map()\n    );\n  }, [type, ordersToRender, orders]);\n\n  return (\n    <div className=\"OrderGrid\">\n      {ordersToRender.map((price) => {\n        const parsedPrice = Number(price);\n        const total = ordersTotalMap.get(parsedPrice) || 0;\n\n        const maxTotalSelector = type === OrderType.Ask ? first : last;\n\n        const maxTotal = ordersTotalMap.get(\n          Number(maxTotalSelector(ordersToRender))\n        );\n\n        const ratioColor = type === OrderType.Ask ? \"red\" : \"green\";\n\n        return (\n          <OrderItem\n            key={price}\n            price={parsedPrice}\n            size={orders[parsedPrice]}\n            total={total}\n            ratio={(total * 100) / maxTotal}\n            ratioColor={ratioColor}\n          />\n        );\n      })}\n    </div>\n  );\n});\n\nexport default OrderGrid;\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { createContext, useCallback, useContext, useMemo } from \"react\";\nimport { throttle, keys, min, max } from \"lodash\";\nimport { OrdersMap, OrderBookMessage } from \"types\";\n\nconst WS_URL = \"wss://www.cryptofacilities.com/ws/v1\";\nconst SUBSCRIBE_MESSAGE =\n  '{\"event\":\"subscribe\",\"feed\":\"book_ui_1\",\"product_ids\":[\"PI_XBTUSD\"]}';\n\ninterface ApiProviderState {\n  bids: OrdersMap;\n  asks: OrdersMap;\n  connecting: boolean;\n  error: string;\n}\n\nconst apiInitialState = {\n  bids: {} as OrdersMap,\n  asks: {} as OrdersMap,\n  connecting: true,\n  error: \"\",\n};\n\nconst ApiProviderContext = createContext<ApiProviderState>(apiInitialState);\n\nconst ORDER_BOOK_UPDATE_DELAY = 200;\n\nclass ApiProvider extends React.Component<{}, ApiProviderState> {\n  wsConnection = new WebSocket(WS_URL);\n  /**\n   * Used to capture all new bids without having to rerender the component.\n   */\n  latestBids: OrdersMap = {};\n  /**\n   * Used to capture all new asks without having to rerender the component.\n   */\n  latestAsks: OrdersMap = {};\n\n  state = apiInitialState;\n\n  setBids = (newBids: OrdersMap) => {\n    this.setState({ bids: newBids });\n  };\n\n  setAsks = (newAsks: OrdersMap) => {\n    this.setState({ asks: newAsks });\n  };\n\n  /**\n   * Throttled wrapper over setBids. Allows control on how often rerender should happen.\n   */\n  throttledSetBids = throttle(this.setBids, ORDER_BOOK_UPDATE_DELAY);\n\n  /**\n   * Throttled wrapper over setAsks. Allows control on how often rerender should happen.\n   */\n  throttledSetAsks = throttle(this.setAsks, ORDER_BOOK_UPDATE_DELAY);\n\n  /**\n   * Updates both latestBids and bids to render state.\n   * @param newOrdersMap - new bids map to set\n   */\n  setNewBids = (newOrdersMap: OrdersMap) => {\n    this.latestBids = newOrdersMap;\n    this.throttledSetBids(this.latestBids);\n  };\n\n  /**\n   * Updates both latestBids and bids to render state.\n   * @param newOrdersMap - new bids map to set\n   */\n  setNewAsks = (newOrdersMap: OrdersMap) => {\n    this.latestAsks = newOrdersMap;\n    this.throttledSetAsks(this.latestAsks);\n  };\n\n  createNewOrders = (\n    newOrders: [number, number][],\n    initialOrders: OrdersMap\n  ) => {\n    return newOrders.reduce(\n      (acc, current) => {\n        const [price, amount] = current;\n\n        if (amount === 0) {\n          delete acc[price];\n        }\n\n        if (amount > 0) {\n          acc[price] = amount;\n        }\n\n        return acc;\n      },\n      { ...initialOrders }\n    );\n  };\n\n  handleNewBids = (newBids: [number, number][]) => {\n    const newOrdersMap = this.createNewOrders(newBids, this.latestBids);\n\n    this.setNewBids(newOrdersMap);\n  };\n\n  handleNewAsks = (newAsks: [number, number][]) => {\n    const newOrdersMap = this.createNewOrders(newAsks, this.latestAsks);\n\n    this.setNewAsks(newOrdersMap);\n  };\n\n  handleWsOpen = (event: Event) => {\n    this.setState({ connecting: false });\n    this.wsConnection.send(SUBSCRIBE_MESSAGE);\n    this.wsConnection.onmessage = (event: MessageEvent<string>) => {\n      try {\n        const message: OrderBookMessage = JSON.parse(event.data);\n\n        this.handleNewBids(message?.bids ?? []);\n        this.handleNewAsks(message?.asks ?? []);\n      } catch (error) {\n        this.setState({ error: error.message });\n      }\n    };\n  };\n\n  handleWsError = (event: Event) => {\n    this.setState({ error: \"Connection failed\", connecting: false });\n  };\n\n  componentDidMount() {\n    this.wsConnection.onopen = this.handleWsOpen;\n    this.wsConnection.onerror = this.handleWsError;\n  }\n\n  componentWillUnmount() {\n    this.throttledSetBids.cancel();\n  }\n\n  render() {\n    const { children } = this.props;\n\n    return (\n      <ApiProviderContext.Provider value={this.state}>\n        {children}\n      </ApiProviderContext.Provider>\n    );\n  }\n}\n\nexport const useOrders = (groupFactor = 0.5) => {\n  const contextValue = useContext(ApiProviderContext);\n\n  const spread = useMemo(() => {\n    const lastAskPrice = Number(min(keys(contextValue.asks)));\n    const firstBidPrice = Number(max(keys(contextValue.bids)));\n\n    return Math.abs(lastAskPrice - firstBidPrice);\n  }, [contextValue.asks, contextValue.bids]);\n\n  const getGroupedOrders = useCallback(\n    (orders: OrdersMap) => {\n      const orderMap: OrdersMap = keys(orders).reduce((acc, currentPrice) => {\n        const roundPrice =\n          Math.floor(Number(currentPrice) / groupFactor) * groupFactor;\n\n        if (acc[roundPrice] == null) {\n          acc[roundPrice] = 0;\n        }\n\n        const newAmount = acc[roundPrice] + orders[Number(currentPrice)];\n\n        return { ...acc, [roundPrice]: newAmount };\n      }, {} as OrdersMap);\n\n      return orderMap;\n    },\n    [groupFactor]\n  );\n\n  const bids = useMemo(() => {\n    if (groupFactor < 1) {\n      return contextValue.bids;\n    }\n\n    return getGroupedOrders(contextValue.bids);\n  }, [contextValue.bids, groupFactor, getGroupedOrders]);\n\n  const asks = useMemo(() => {\n    if (!groupFactor) {\n      return contextValue.asks;\n    }\n\n    return getGroupedOrders(contextValue.asks);\n  }, [contextValue.asks, groupFactor, getGroupedOrders]);\n\n  return { ...contextValue, bids, asks, spread };\n};\n\nexport default ApiProvider;\n","import ApiProvider from \"./ApiProvider\";\n\nexport * from \"./ApiProvider\";\nexport default ApiProvider;\n","import OrderItem from \"./OrderItem\";\n\nexport default OrderItem;\n","import React, { memo } from \"react\";\nimport \"./OrderItem.scss\";\n\ninterface OrderItemProps {\n  price: number;\n  size: number;\n  total: number;\n  ratio: number;\n  ratioColor?: string;\n}\n\nconst OrderItem: React.FC<OrderItemProps> = memo((props) => {\n  const { price, size, total, ratio = 0, ratioColor = \"green\" } = props;\n  return (\n    <div className=\"OrderItem\">\n      <div\n        className=\"OrderItem_Ratio\"\n        style={{ width: `${ratio}%`, backgroundColor: ratioColor }}\n      />\n      <div className=\"OrderItem_Column\">{price.toLocaleString()}</div>\n      <div className=\"OrderItem_Column\">{size.toLocaleString()}</div>\n      <div className=\"OrderItem_Column\">{total.toLocaleString()}</div>\n    </div>\n  );\n});\n\nexport default OrderItem;\n","import OrderGrid from \"./OrderGrid\";\n\nexport * from \"./OrderGrid\";\nexport default OrderGrid;\n","import OrderBookActions from \"./OrderBookActions\";\n\nexport default OrderBookActions;\n","import React from \"react\";\nimport { isNil, isNaN } from \"lodash\";\nimport \"./OrderBookActions.scss\";\n\ninterface OrderBookActionsProps {\n  spread: number;\n  group: number;\n  handleIncrease: () => void;\n  handleDecrease: () => void;\n  increaseDisabled?: boolean;\n  decreaseDisabled?: boolean;\n}\nconst OrderBookActions: React.FC<OrderBookActionsProps> = ({\n  spread,\n  group,\n  handleIncrease,\n  handleDecrease,\n  increaseDisabled,\n  decreaseDisabled,\n}) => {\n  if (isNaN(spread) || isNil(spread)) {\n    return null;\n  }\n  return (\n    <div className=\"OrderBookActions\">\n      <div>{`Spread: ${spread}`}</div>\n      <div>{`Group: ${group}`}</div>\n      <div>\n        <button\n          className=\"OrderBookActions_GroupChanger\"\n          onClick={handleIncrease}\n          disabled={increaseDisabled}\n        >\n          +\n        </button>\n        <button\n          className=\"OrderBookActions_GroupChanger\"\n          onClick={handleDecrease}\n          disabled={decreaseDisabled}\n        >\n          -\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default OrderBookActions;\n","import React, { useState } from \"react\";\nimport Loader from \"react-loader-spinner\";\nimport { useOrders } from \"containers/ApiProvider\";\nimport OrderGrid, { OrderType } from \"components/OrderGrid\";\nimport OrderBookActions from \"components/OrderBookActions\";\nimport \"./OrderBook.scss\";\n\nconst GROUP_OPTIONS = [0.5, 1, 5, 10, 25, 50];\nconst OrderBook = () => {\n  const [groupIndex, setGroupIndex] = useState(0);\n  const { bids, asks, spread, connecting, error } = useOrders(\n    GROUP_OPTIONS[groupIndex]\n  );\n\n  const handleIncreaseGroup = () => {\n    if (groupIndex < GROUP_OPTIONS.length - 1) {\n      setGroupIndex(groupIndex + 1);\n    }\n  };\n\n  const handleDecreaseGroup = () => {\n    if (groupIndex > 0) {\n      setGroupIndex(groupIndex - 1);\n    }\n  };\n\n  const renderContent = () => {\n    if (error) {\n      return <span>{error}</span>;\n    }\n    if (connecting) {\n      return (\n        <Loader type={\"MutatingDots\"} color=\"teal\" secondaryColor=\"teal\" />\n      );\n    }\n\n    return (\n      <>\n        <OrderGrid type={OrderType.Ask} orders={asks} />\n        <OrderBookActions\n          spread={spread}\n          group={GROUP_OPTIONS[groupIndex]}\n          handleDecrease={handleDecreaseGroup}\n          decreaseDisabled={groupIndex === 0}\n          handleIncrease={handleIncreaseGroup}\n          increaseDisabled={groupIndex === GROUP_OPTIONS.length - 1}\n        />\n        <OrderGrid type={OrderType.Bid} orders={bids} />\n      </>\n    );\n  };\n\n  return <div className=\"OrderBook\">{renderContent()}</div>;\n};\n\nexport default OrderBook;\n","import OrderBook from \"./OrderBook\";\n\nexport default OrderBook;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport OrderBook from \"components/OrderBook\";\nimport \"./App.css\";\nimport ApiProvider from \"containers/ApiProvider\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h4>Calin's Order Book</h4>\n      </header>\n      <div className=\"App-container\">\n        <ApiProvider>\n          <OrderBook />\n        </ApiProvider>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}